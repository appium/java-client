import org.apache.tools.ant.filters.*

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'jacoco'
    id 'checkstyle'
    id 'signing'
    id 'org.owasp.dependencycheck' version '7.2.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

ext {
    seleniumVersion = project.property('selenium.version')
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    api ('org.seleniumhq.selenium:selenium-api') {
        version {
            strictly "[${seleniumVersion}, 5.0)"
            prefer "${seleniumVersion}"
        }
    }
    api ('org.seleniumhq.selenium:selenium-remote-driver') {
        version {
            strictly "[${seleniumVersion}, 5.0)"
            prefer "${seleniumVersion}"
        }
    }
    implementation ('org.seleniumhq.selenium:selenium-support') {
        version {
            strictly "[${seleniumVersion}, 5.0)"
            prefer "${seleniumVersion}"
        }
    }
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'cglib:cglib:3.3.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation (group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.3.0') {
        exclude group: 'org.seleniumhq.selenium'
    }
    testImplementation ('org.seleniumhq.selenium:selenium-chrome-driver') {
        version {
            strictly "[${seleniumVersion}, 5.0)"
            prefer "${seleniumVersion}"
        }
    }
}

ext {
    Sources = fileTree("$buildDir/src/main/java").include('**/*.java')
    Tests = fileTree("$buildDir/src/test/java").include('**/*.java')
    Docs = file("$buildDir/doc")
}

dependencyCheck {
    failBuildOnCVSS=22
}

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(JacocoReport) {
    description = 'Generate Jacoco coverage reports after running tests'
    sourceSets sourceSets.main
    reports {
        html.required = true
        html.destination file("${buildDir}/Reports/jacoco")
    }
}
jacocoTestReport.dependsOn test

checkstyle {
    toolVersion = '8.32'
    configFile = file("$projectDir/google-style.xml")
    showViolations = true
    ignoreFailures = false
}
checkstyleMain.excludes = ['**/org/openqa/selenium/**']

javadoc {
    options.addStringOption('encoding', 'UTF-8')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.appium'
            artifactId = 'java-client'
            version = '8.2.0'
            from components.java
            pom {
                name = 'java-client'
                description = 'Java client for Appium Mobile Webdriver'
                url = 'http://appium.io'
                developers {
                    developer {
                        name = 'Jonah Stiennon'
                        email = 'jonahss@gmail.com'
                        url = 'https://github.com/jonahss'
                        id = 'jonahss'
                    }
                    developer {
                        name = 'Sergey Tikhomirov'
                        email = 'tichomirovsergey@gmail.com'
                        url = 'https://github.com/TikhomirovSergey'
                        id = 'TikhomirovSergey'
                    }
                    developer {
                        name = 'Srinivasan Sekar'
                        email = 'srinivasan.sekar1990@gmail.com'
                        url = 'https://github.com/SrinivasanTarget'
                        id = 'SrinivasanTarget'
                    }
                    developer {
                        name = 'Mykola Mokhnach'
                        url = 'https://github.com/mykola-mokhnach'
                        id = 'mykola-mokhnach'
                    }
                    developer {
                        name = 'Valery Yatsynovich'
                        url = 'https://github.com/valfirst'
                        id = 'valfirst'
                    }
                }
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/appium/java-client'
                    connection = 'scm:git:ssh://git@github.com/appium/java-client.git'
                    developerConnection = 'scm:git:ssh://git@github.com/appium/java-client.git'
                    tag = 'HEAD'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "$ossrhUsername"
                password "$ossrhPassword"
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/'"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

processResources {
    filter ReplaceTokens, tokens: [
            'selenium.version': seleniumVersion
    ]
}

task xcuiTest( type: Test ) {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching 'io.appium.java_client.ios.*'
        includeTestsMatching '*.pagefactory_tests.XCUITModeTest'
        includeTestsMatching '*.pagefactory_tests.widget.tests.combined.*'
        includeTestsMatching '*.pagefactory_tests.widget.tests.ios.*'
        includeTestsMatching 'io.appium.java_client.service.local.StartingAppLocallyIosTest'
        exclude '**/IOSScreenRecordTest.class'
        exclude '**/ImagesComparisonTest.class'
    }
}

task uiAutomationTest( type: Test ) {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching 'io.appium.java_client.android.SettingTest'
        includeTestsMatching 'io.appium.java_client.android.ClipboardTest'
        includeTestsMatching 'io.appium.java_client.android.OpenNotificationsTest'
        includeTestsMatching '*.AndroidAppStringsTest'
        includeTestsMatching '*.pagefactory_tests.widget.tests.android.*'
        includeTestsMatching '*.pagefactory_tests.widget.tests.AndroidPageObjectTest'
        includeTestsMatching 'io.appium.java_client.service.local.StartingAppLocallyAndroidTest'
        includeTestsMatching 'io.appium.java_client.service.local.ServerBuilderTest'
        includeTestsMatching 'io.appium.java_client.service.local.ThreadSafetyTest'
    }
}

task miscTest( type: Test ) {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching 'io.appium.java_client.touch.*'
        includeTestsMatching 'io.appium.java_client.events.*'
        includeTestsMatching 'io.appium.java_client.remote.*'
        includeTestsMatching 'io.appium.java_client.drivers.options.*'
    }
}
