import org.apache.tools.ant.filters.*

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'eclipse'
    id 'jacoco'
    id 'checkstyle'
    id 'signing'
    id 'org.owasp.dependencycheck' version '6.1.5'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
    mavenCentral()
}

configurations {
    ecj
    lombok
}

dependencies {
    ecj 'org.eclipse.jdt:ecj:3.25.0'
    lombok 'org.projectlombok:lombok:1.18.20'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    def ecjJar = configurations.ecj.singleFile
    def lombokjar = configurations.lombok.singleFile

    options.fork = true
    options.fork executable: 'java', jvmArgs: [ '-javaagent:'+lombokjar.path+'=ECJ', '-jar', ecjJar.path, '-cp', lombokjar.path]
    options.define compilerArgs: [
            '-encoding', 'utf-8',
            // https://www.ibm.com/support/knowledgecenter/SS8PJ7_9.7.0/org.eclipse.jdt.doc.user/tasks/task-using_batch_compiler.htm
            '-warn:-unused,-unchecked,-raw,-serial,-suppress',
    ]

    // https://github.com/gradle/gradle/issues/12904
    options.headerOutputDirectory.convention(null)
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.18.16')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    api ("org.seleniumhq.selenium:selenium-java") {
        version {
            strictly "${project.property('selenium.version')}"
        }

        exclude group: 'com.google.code.gson'
        exclude module: 'htmlunit-driver'
        exclude group: 'net.sourceforge.htmlunit'

    }
    implementation ("org.seleniumhq.selenium:selenium-support") {
        version {
            strictly "${project.property('selenium.version')}"
        }
    }
    implementation ("org.seleniumhq.selenium:selenium-api") {
        version {
            strictly "${project.property('selenium.version')}"
        }
    }
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'cglib:cglib:3.3.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.9.0'
    implementation 'org.springframework:spring-context:5.3.7'
    implementation 'org.aspectj:aspectjweaver:1.9.6'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation (group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.4.3') {
        exclude group: 'org.seleniumhq.selenium'
    }
}

ext {
    Sources = fileTree("$buildDir/src/main/java").include('**/*.java')
    Tests = fileTree("$buildDir/src/test/java").include('**/*.java')
    Docs = file("$buildDir/doc")
}

dependencyCheck {
    failBuildOnCVSS=22
}

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(JacocoReport) {
    description = 'Generate Jacoco coverage reports after running tests'
    sourceSets sourceSets.main
    reports {
        html.enabled true
        html.destination file("${buildDir}/Reports/jacoco")
    }
}
jacocoTestReport.dependsOn test

checkstyle {
    toolVersion = '8.32'
    configFile = file("$projectDir/google-style.xml")
    showViolations = true
    ignoreFailures = false
}
checkstyleMain.excludes = ['**/org/openqa/selenium/**']

javadoc {
    options.addStringOption('encoding', 'UTF-8')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.appium'
            artifactId = 'java-client'
            version = '7.5.1'
            from components.java
            pom {
                name = 'java-client'
                description = 'Java client for Appium Mobile Webdriver'
                url = 'http://appium.io'
                developers {
                    developer {
                        name = 'Jonah Stiennon'
                        email = 'jonahss@gmail.com'
                        url = 'https://github.com/jonahss'
                        id = 'jonahss'
                    }
                    developer {
                        name = 'Sergey Tikhomirov'
                        email = 'tichomirovsergey@gmail.com'
                        url = 'https://github.com/TikhomirovSergey'
                        id = 'TikhomirovSergey'
                    }
                    developer {
                        name = 'Srinivasan Sekar'
                        email = 'srinivasan.sekar1990@gmail.com'
                        url = 'https://github.com/SrinivasanTarget'
                        id = 'SrinivasanTarget'
                    }
                    developer {
                        name = 'Mykola Mokhnach'
                        url = 'https://github.com/mykola-mokhnach'
                        id = 'mykola-mokhnach'
                    }
                }
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/appium/java-client'
                    connection = 'scm:git:ssh://git@github.com/appium/java-client.git'
                    developerConnection = 'scm:git:ssh://git@github.com/appium/java-client.git'
                    tag = 'HEAD'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "$ossrhUsername"
                password "$ossrhPassword"
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/'"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

wrapper {
    gradleVersion = '6.7.1'
    distributionType = Wrapper.DistributionType.ALL
}

processResources {
    filter ReplaceTokens, tokens: [
            'selenium.version': project.property('selenium.version')
    ]
}

task xcuiTest( type: Test ) {
    useJUnit()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching '*.appium.element.generation.ios.*'
        includeTestsMatching '*.appium.AppiumFluentWaitTest'
        includeTestsMatching 'io.appium.java_client.ios.*'
        includeTestsMatching '*.pagefactory_tests.XCUITModeTest'
        includeTestsMatching '*.pagefactory_tests.widget.tests.combined.*'
        includeTestsMatching '*.pagefactory_tests.widget.tests.ios.*'
        includeTestsMatching '*.StartingAppLocallyTest.startingIOSAppWithCapabilitiesAndServiceTest'
        includeTestsMatching '*.StartingAppLocallyTest.startingIOSAppWithCapabilitiesAndFlagsOnServerSideTest'
        exclude '**/UIAutomationTest.class'
        exclude '**/IOSScreenRecordTest.class'
        exclude '**/ImagesComparisonTest.class'
    }
}

task uiAutomationTest( type: Test ) {
    useJUnit()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching 'io.appium.java_client.android.SettingTest'
        includeTestsMatching 'io.appium.java_client.android.ClipboardTest'
        includeTestsMatching '*.AndroidAppStringsTest'
    }
}
